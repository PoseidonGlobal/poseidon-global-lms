// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum StudentStatus {
  ACTIVE
  SUSPENDED
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  hashedPassword    String
  role              Role
  mustChangePassword Boolean @default(false)
  emailVerifiedAt   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  studentProfile    StudentProfile?
  facultyProfile    FacultyProfile?
  adminProfile      AdminProfile?
  passwordResetTokens PasswordResetToken[]
  auditLogs         AuditLog[]

  @@map("users")
}

model StudentProfile {
  id            String        @id @default(cuid())
  userId        String        @unique
  studentNumber String        @unique
  firstName     String
  lastName      String
  phone         String?
  country       String?
  status        StudentStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model FacultyProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  title      String?
  bio        String?
  department String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("faculty_profiles")
}

model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}